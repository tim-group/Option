allprojects {
  apply plugin: 'java'
  apply plugin: 'idea'
  apply plugin: 'eclipse'
  apply plugin: 'maven'

  group = "com.timgroup"
  ext.releaseVersion = '1.0'
  version = version(project)


  dependencies {
    testCompile     group: "junit",         name: 'junit-dep',           version: "4.9"
    testCompile     group: 'org.hamcrest',  name: 'hamcrest-all',        version: '1.1'
    testCompile    (group: 'org.mockito',   name: 'mockito-core',        version: '1.8.5') {
              exclude module: 'hamcrest-core'
    }
  }

  repositories {
      mavenCentral()
  }

  task sourcesJar(type: Jar, dependsOn:classes) {
     classifier = 'sources'
     from sourceSets.main.allSource
  }

  artifacts {
       archives sourcesJar
  }
}

project('Option-Utils') {
  dependencies {
      compile     project(':Option-Main')
  }
}

project('Option-Main') {
  dependencies {
    compile     group: 'com.timgroup',                  name: 'Functional',             version: '1.0'
    compile     group: 'com.googlecode.lambdaj',        name: 'lambdaj',                version: '2.3.1'
  }

  repositories {
      maven {
          url 'http://lambdaj.googlecode.com/svn/repo/releases'
      }
  }
}

project('Option-Scala') {
  ext.scalaVersion = "2.9.0-1"

  dependencies {
    compile     project(':Option-Main')
    compile     "org.scala-lang:scala-library:$scalaVersion"
  }
}

//task jarAll(type: Jar, dependsOn: subprojects.assemble) {
//    baseName = 'Option-all'
//    subprojects.each { subproject ->
//        if (!subproject.name.contains('Scala'))
//            from subproject.configurations.archives.allArtifactFiles.collect { zipTree(it) }
//    }
//}

def version(Project project) {
    def releaseVersion = '0';
    if (project.hasProperty('releaseVersion') && !project.releaseVersion.isEmpty()) {
        releaseVersion = project.releaseVersion
    }

    String projectVersion
    def ciBuildNumber = System.getenv("BUILD_NUMBER")
    if (ciBuildNumber == null || ciBuildNumber.isEmpty()) {
        projectVersion = releaseVersion + '.0.' + (new Date()).format("yyyyMMdd-HHmmss") + '-dev'
    } else {
        projectVersion = releaseVersion + '.' + ciBuildNumber
    }
    return projectVersion
}
